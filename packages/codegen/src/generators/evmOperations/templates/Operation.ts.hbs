import { {{#if requestUrlParams }}Core, Camelize, {{/if}}Operation, {{#if isMaybeImported }}maybe{{/if}} } from '@moralisweb3/common-core';
{{#if utilsToImport}}import { {{#each utilsToImport}}{{ this }},{{/each}} } from '../../dataTypes';{{/if}}
{{#if isEvmChainImported}}import { EvmChainResolver } from '../../EvmChainResolver';{{/if}}
import { operations } from '../openapi';

type OperationId = '{{ name }}';

{{#if urlPathParamNames}}type PathParams = operations[OperationId]['parameters']['path'];{{/if}}

{{#if urlSearchParamNames}}type QueryParams = operations[OperationId]['parameters']['query'];{{/if}}

{{#if hasBodyParams}}type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];{{/if}}

{{#if requestBodyAndParams }}type RequestParams = {{#if urlPathParamNames}}PathParams{{/if}} {{#if urlSearchParamNames}}& QueryParams{{/if}} {{#if hasBodyParams}}& BodyParams{{/if}};{{/if}}


type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];

// Exports

{{! Interface }}
export interface {{ properCase name }}Request {{#if requestBodyAndParams }}extends Camelize<{{#if requestParamsToOverwrite}}Omit<RequestParams, {{#each requestParamsToOverwrite}} | '{{ this.name }}'{{/each}}>{{else}}RequestParams{{/if}}>{{/if}} {
  {{#if requestParamsToOverwrite}}
    {{#each requestParamsToOverwrite}}
      {{camelCase this.name}}{{#if this.hasQuestion}}?:{{else}}:{{/if}} {{ this.dataType.requestType }};
    {{/each}}
  {{/if}}
}

export type {{ properCase name }}JSONRequest = {{#if requestUrlParams }}ReturnType<typeof serializeRequest>{{else}}undefined{{/if}};

export type {{ properCase name }}JSONResponse = SuccessResponse;

export type {{ properCase name }}Response = ReturnType<typeof deserializeResponse>;

export const {{ properCase name }}Operation: Operation<
  {{ properCase name }}Request,
  {{ properCase name }}JSONRequest,
  {{ properCase name }}Response,
  {{ properCase name }}JSONResponse
> = {
  method: '{{ method }}',
  name: '{{ name }}',
  id: '{{ name }}',
  groupName: 'token',
  urlPathPattern: '{{ path }}',
  {{#if urlPathParamNames}}urlPathParamNames: [{{#each urlPathParamNames}}'{{camelCase this}}',{{/each}}],{{/if}}
  {{#if urlSearchParamNames}}urlSearchParamNames: [{{#each urlSearchParamNames}}'{{camelCase this}}',{{/each}}],{{/if}}
  {{#if bodyParamNames}}
    bodyType: 'properties',
    bodyParamNames: [{{#each bodyParamNames}}'{{camelCase this}}',{{/each}}],
  {{/if}}

  {{#if bodyParamNames}}getRequestBody,{{/if}}
  {{#if requestUrlParams }}
  getRequestUrlParams,
  serializeRequest,
  deserializeRequest,
  {{/if}}
  deserializeResponse,
};

// Methods

{{#if bodyParamNames}}
function getRequestBody(request: {{ properCase name }}Request) {
  return {
    {{#each requestBodyParams}}
      {{ this.name }}: request.{{ camelCase this.name }},
    {{/each}}
  };
}
{{/if}}


{{#if requestUrlParams }} 
function getRequestUrlParams(request: {{ properCase name }}Request, core: Core) {
  return {
    {{#each requestUrlParams}}
      {{this.name}}: {{ getRequestUrlParams this.dataType }},
    {{/each}}
  };
}

function serializeRequest(request: {{ properCase name }}Request, core: Core) {
  return {
    {{#each requestUrlParams}}
      {{ camelCase this.name }}: {{ serialize this.dataType 'request' }},
    {{/each}}
  };
}

function deserializeRequest(
  jsonRequest: {{ properCase name }}JSONRequest,
  core: Core,
): {{ properCase name }}Request {
  return {
    {{#each requestUrlParams}}
      {{ camelCase this.name }}: {{ deserialize this.dataType 'jsonRequest' 'core' }},
    {{/each}}
  };
}
{{/if}}

{{#if isPaginated}}
function deserializeResponse(jsonResponse: {{ properCase name }}JSONResponse, request: {{ properCase name }}Request, core: Core) {
   return jsonResponse;
}
{{else}}
function deserializeResponse(jsonResponse: {{ properCase name }}JSONResponse) {
  return jsonResponse;
}
{{/if}}